A	add words (src, dst)
AB	add bytes (src, dst)
ABS	absolute value
AI	add immediate (wr, imm)
ANDI	and immediate (wr, imm)
B	branch
BL	branch and link
BLWP	branch and load WP
C	compare words
CB	compare bytes
CI	compare immediate (wr, imm)
CKOF	clock off
CKON	clock on
CLR	clear operand
COC	compare ones corresponding (OR) (src, wr)
CZC	compare zeros corresponding (AND) (src, wr)
DEC	decrement
DECT	decrement by two
DIV	divide (src, wr dst) (div 32-bit dst+1 & dst by src, with rem in dst+1)
IDLE	idle
INC	increment
INCT	increment by two
INV	invert
JEQ	jump equal              (EQ=1)
JGT	jump greater than       (A>=1, signed)
JH	jump if logical high    (L>=1 and EQ=0)
JHE	jump high or equal      (L>=1 or EQ=1)
JL	jump if logical low     (L>=0 and EQ=0)
JLE	jump if low or equal    (L>=0 or EQ=1)
JLT	jump less than          (A>=0 and EQ=0)
JMP	unconditional jump
JNC	jump no carry           (C=0)
JNE	jump not equal          (EQ=0)
JNO	jump no overflow        (OV=0)
JOC	jump on carry           (C=1)
JOP	jump odd parity         (OP=1)
LDCR	load CRU
LI	load immediate (wr dst, imm)
LIMI	load interrupt mask register
LREX	load or restart execution
LWPI	load WP immediate
MOV	move words (src, dst)
MOVB	move bytes (src, dst)
MPY	multiply (src, wr dst) (wr dst+1 gets lower 16 bits)
NEG	negate
NOP	no operation (pseudo: JMP $+2)
ORI	or immediate (wr, imm)
RSET	reset
RT	return (pseudo: B *R11)
RTWP	return with WP
S	subtract words (src, dst)
SB	subtract bytes (src, dst)
SBO	set CRU bit to one
SBZ	set CRU bit to zero
SETO	set to one
SLA	shift left arithmetic (wr, scnt) (use WR0 lower nibble if scnt=0)
SOC	set ones corresponding (OR) (src, dst)
SOCB	set ones corresponding byte (src, dst)
SRA	shift right arithmetic (wr, scnt) (use WR0 lower nibble if scnt=0)
SRC	shift right circular (wr, scnt) (use WR0 lower nibble if scnt=0)
SRL	shift right logical (wr, scnt) (use WR0 lower nibble if scnt=0)
STCR	store CRU
STST	store status (wr)
STWP	store workspace pointer (wr)
SWPB	swap bytes
SZC	set zeros corresponding (NAND) (src, dst)
SZCB	set zeros corresponding byte (src, dst)
TB	test CRU bit
X	execute (indirect instruction in register or memory)
XOP	extended operation
XOR	exclusive or (src, wrdst)


Directives:
AORG	absolute origin
RORG	relocatable origin
DORG	dummy origin
BSS	block starting with symbol
BES	block ending with symbol
EVEN	word boundary
PSEG	program segment
PEND	program segment end

CSEG	common segment
CEND	common segment end
DSEG	data segment
DEND	data segment end

UNL	no source list
LIST	list source
PAGE	page eject
TITL	page title
IDT	program identifier

EQU	define assembly-time constant
BYTE	initialize byte
DATA	initialize word
TEXT	initialize text

DEF	external definition
REF	external reference
COPY	copy
LOAD	force load
SREF	secondary reference

DXOP	define extended operation
END	program end


CPU RAM is 256 bytes (sidecar expansion is 32k)
VPU RAM is 16k on TI994a

Memory Map: 8k blocks in 64k address space
0000-  Console ROM
2000-  Low Memory Expansion (lower 8k, when connected)
4000-  Peripheral mapped ROMs for DSR
6000-  Application ROMs in command module (cartridge)
8000-  Memory mapped devices
A000-  High memory expansion (upper 24k)

8300-83FF  256 bytes RAM
83C2   ISRCTL * Four flags: disable all, skip sprite, skip sound, skip QUIT
83C4   USRISR * Interrupt service routine hook address

8800   VDP RAM read data register
8802   VDP RAM read status register
8C00   VDP RAM write data register
8C02   VDP RAM write address register



VDP Registers  (bit indexes are reversed)
0  000000xx 6=M3 7=Ext vid enable
1  xxxx0xxx 0=4/16k 1=Blank enable 2=Int enable 3=M1 4=M2 5=Rsv 6=sprite size 7=sprite mag
2  Screen Image Table address div >400 (0000,0400 ... 3C00)
3  Color Table address div >40 (0000,0040 ... 3FC0)
4  Pattern Descriptor Table div >800 (0000,0800 ... 3800)
5  Sprite Attribute List div >80 (0000,0080 ... 3F80)
6  Sprite Descriptor Table div >800 (0000,0800 ... 3800)
7  Foreground and background color nibbles

M3 M2 M1
 0  0  0  Graphics Mode I (32x24)
 0  0  1  Text Mode (40x24)
 0  1  0  Multicolor Mode (64x48 blocks, block is 4x4 pixels)
 1  0  0  Bitmap Mode (32x24)

Colors
0 Transparent	8 Medium Red
1 Black		9 Light Red
2 Medium Green	A Dark Yellow
3 Light Green	B Light Yellow
4 Dark Blue	C Dark Green
5 Light Blue	D Magenta
6 Dark Red	E Gray
7 Cyan		F White

Screen Image Table
32x24 1 byte per character

Color Table
32 bytes fg and bg color nibbles per 8 characters (Gfx Mode I)
256*8*3 bytes fg and bg color nibbles per 8 pixels! (Gfx Mode II)

Pattern Descriptor Table
256*8 pixel bitmask (Gfx Mode I)
256*8*3 pixel bitmask (Gfx Mode II)

Sprite Attribute List (up to 32 entries)
4 bytes per sprite
 Y veritical position FF,00..BE  (or D0 for end-of-list)
 X horizontal position 00..FF
 pattern code 00..FF (times 8 offset into Sprite Pattern Table)
 color and early clock bit (32 pixel shift left)

Sprite Descriptor Table (Sprite Pattern Table) (2048 bytes limit)
8 bytes per sprite for 8x8  (up to 256 entries)
32 bytes per sprite for 16x16  (up to 64 entries)
(in 8x8 chunks: upper-left, lower-left, upper-right, lower right)

Sprite Motion Table (fixed at 0780)
(Number of moving sprites programmed to 837A)
(Only works if interrupt is enabled)

A note on reading the VDP status register: polling VSYNC and collision 
may miss due to clearing the register as is updated by the VDP.
Might be better to use the ISR instead, or do a delay between reading the
status register.

Interrupts must be disabled (LIMI 0) while doing anything with VDP, since ISR
will read the status register and disrupt any concurrent VDP read/writes.


Reading Keyboard or joystick  (see http://www.unige.ch/medecine/nouspikel/ti99/keyboard.htm)
To read a key, set R12 and CRU, then set R12 and TB or read CRU
Set column scan line: 
LI R1, X        * See chart below
LI R12,>0024    * Select address lines starting at line 18
LDCR R1,3       * Send 3 bits to set one 8 of output lines enabled
LI R12,>0006    * Select address lines to read starting at line 3
TB X            * Test key bits, see chart

R1      TB 0	TB 1	TB 2	TB 3	TB 4	TB 5	TB 6	TB 7
0000	=	space	enter		fctn	shift	ctrl
0100	.	L	O	9	2	S	W	X
0200	,	K	I	8	3	D	E	C
0300	M	J	U	7	4	F	R	V
0400	N	H	Y	6	5	G	T	B
0500	/	;	P	0	1	A	Q	Z
0600	Fire1	Left1	Right1	Down1	Up1
0700	Fire2	Left2	Right2	Down2	Up2


Joystick controller pinout
TI Pin           Wire    Pin
1     NC         Red     7
2 OUT Test J2    White   8
3 IN  UP         Brown   3
4 IN  Fire       Yellow  4
5 IN  Left       Blue    2
6     NC         Black   5
7 OUT Test J1    Grey    1
8 IN  Down       Orange  9
9 IN  Right      Green   6

